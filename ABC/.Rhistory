A = cbind(c(3,2,4), c(2,0,2), c(4,2,3))
for(i in 2:steps) {
Ay = A %*% y
y = Ay / (sqrt(Ay%*%Ay))
}
y
eigen(A)
y = c(1,1,1)
steps = 100
A = cbind(c(3,2,4), c(2,0,2), c(4,2,3))
for(i in 1:steps) {
Ay = A %*% y
#  y = Ay / (sqrt(Ay%*%Ay))
y = Ay / sqrt(sum(Ay^2))
}
y
eigen(A)
n = 10
coords = matrix(rnorm(n*2), ncol=2)
plot(coords)
lines(coords[1,], coords[2,])
coords[1,]
lines(coords[1,1], coords[2,2])
lines(coords[1,1], coords[2,2], col="blue")
lines(coords[1,], coords[3,], col="blue")
lines(c(coords[1,1], coords[2,1]), c(coords[1,2], coords[2,2]), col="blue")
plot(coords)
for(i in 1:nrow(coords)) {
for(j in 1:nrow(coords)) {
lines(c(coords[i,1], coords[i,2]), c(coords[j,1], coords[j,2]))
}
}
plot(coords)
for(i in 1:nrow(coords)) {
for(j in i:nrow(coords)) {
lines(c(coords[i,1], coords[i,2]), c(coords[j,1], coords[j,2]))
}
}
plot(coords)
for(i in 1:nrow(coords)) {
for(j in i:nrow(coords)) {
lines(c(coords[i,1], coords[j,1]), c(coords[i,2], coords[j,2]))
}
}
plot(coords)
for(i in 1:nrow(coords)) {
for(j in i:nrow(coords)) {
lines(c(coords[i,1], coords[j,1]), c(coords[i,2], coords[j,2]))
}
}
coords = matrix(rnorm(n*2), ncol=2)
plot(coords)
for(i in 1:nrow(coords)) {
for(j in i:nrow(coords)) {
lines(c(coords[i,1], coords[j,1]), c(coords[i,2], coords[j,2]))
}
}
coords = matrix(rnorm(n*2), ncol=2)
plot(coords)
for(i in 1:nrow(coords)) {
for(j in i:nrow(coords)) {
lines(c(coords[i,1], coords[j,1]), c(coords[i,2], coords[j,2]))
}
}
n = 100
coords = matrix(rnorm(n*2), ncol=2)
plot(coords)
for(i in 1:nrow(coords)) {
for(j in i:nrow(coords)) {
lines(c(coords[i,1], coords[j,1]), c(coords[i,2], coords[j,2]))
}
}
n = 100
coords = matrix(rnorm(n*2), ncol=2)
plot(coords)
for(i in 1:nrow(coords)) {
for(j in i:nrow(coords)) {
lines(c(coords[i,1], coords[j,1]), c(coords[i,2], coords[j,2]))
}
}
b = rep(0, 4096)
t = c(1:2048, 2048:1)/4096
t
b = rep(0, 4096)
t = c(1:2048, 2048:1)#/4096
t
b = rep(0, 4096)
t = c(1:2048, 2048:1)/4096
w = 1/2
rep(t[2:length(t)], 2)
b = rep(0, 4096)
t = c(1:2048, 2048:1)/4096
x = c(1:4096) / 4096
w = 1/2
for(i in 1:10) {
b = b + t
t = w * rep(t[2:length(t)], 2)
}
plot(x, b)
seq(2,10,2)
seq(2,10,by=2)
b = rep(0, 4096)
t = c(1:2048, 2048:1)/4096
x = c(1:4096) / 4096
w = 1/2
for(i in 1:10) {
b = b + t
t = w * t[seq(2,4096,by=2)]
t = c(t,t)
}
plot(x, b)
plot(x, b, type="l")
b = rep(0, 4096)
t = c(1:2048, 2048:1)/4096
x = c(1:4096) / 4096
w = 1/4
for(i in 1:10) {
b = b + t
t = w * t[seq(2,4096,by=2)]
t = c(t,t)
}
plot(x, b, type="l")
b = rep(0, 4096)
t = c(1:2048, 2048:1)/4096
x = c(1:4096) / 4096
w = 3/4
for(i in 1:10) {
b = b + t
t = w * t[seq(2,4096,by=2)]
t = c(t,t)
}
plot(x, b, type="l")
b = rep(0, 4096)
t = c(1:2048, 2048:1)/4096
x = c(1:4096) / 4096
w = 3/4
for(i in 1:10) {
b = b + t
t = w * t[seq(2,4096,by=2)]
#t = c(t,t)
}
plot(x, b, type="l")
b = rep(0, 4096)
t = c(1:2048, 2048:1)/4096
x = c(1:4096) / 4096
w = 1/2
for(i in 1:10) {
b = b + t
t = w * t[seq(2,4096,by=2)]
#t = c(t,t)
}
plot(x, b, type="l")
b = rep(0, 4096)
t = c(1:2048, 2048:1)/4096
x = c(1:4096) / 4096
w = 1/2
for(i in 1:10) {
b = b + t
t = w * t[seq(2,4096,by=2)]
t = c(t,t)
}
plot(x, b, type="l")
library(MASS)
bodyfat.data = read.table(file="http://www.stats.gla.ac.uk/~sray/bodyfatdata.txt", header=FALSE,col.names = c('triceps', 'thigh', 'midarm', 'bodyfat))
""
)
]
""
''
''
bodyfat.data = read.table(file="http://www.stats.gla.ac.uk/~sray/bodyfatdata.txt", header=FALSE,col.names = c('triceps', 'thigh', 'midarm', 'bodyfat'))
View(bodyfat.data)
cor(bodyfat.data[, 4])
allridge = lm.ridge(bodyfat ~ triceps + thigh + midarm , lambda = seq(0, 1, 0.001))
allridge = lm.ridge(bodyfat ~ triceps + thigh + midarm , lambda = seq(0, 1, 0.001))
attach(bodyfat.data)
bodyfat
allridge = lm.ridge(bodyfat ~ triceps + thigh + midarm , lambda = seq(0, 1, 0.001))
allridge
plot(allridge$lambda , allridge$GCV , type="l")
library(boot)
library(MASS)
data(UScrime)
attach(UScrime)
UScrime
UScrime[,1]
head(UScrime)
GDP
Ineq
skewness(GDP)
library(moments)
install.packages(moments)
install.packages("moments")
library(moments)
skewness(GDP)
skewness(Ineq)
allest=function(data,indices)
return(c(GDP=skewness(data[indices,1]),Ineq=skewness(data[indices,2]),corr=corr(data[indices,])))
results.all <- boot(data=cbind(GDP,Ineq), statistic=allest, R=1000)
boot.ci(boot.out = results.all, index = 1)   # For skewness of GDP
allest=function(data,indices {
browser()
return(c(GDP=skewness(data[indices,1]),Ineq=skewness(data[indices,2]),corr=corr(data[indices,])))
}
results.all <- boot(data=cbind(GDP,Ineq), statistic=allest, R=1000)
allest <- function(data,indices {
browser()
return(c(GDP=skewness(data[indices,1]),Ineq=skewness(data[indices,2]),corr=corr(data[indices,])))
}
results.all <- boot(data=cbind(GDP,Ineq), statistic=allest, R=1000)
allest <- function(data,indices) {
browser()
return(c(GDP=skewness(data[indices,1]),Ineq=skewness(data[indices,2]),corr=corr(data[indices,])))
}
results.all <- boot(data=cbind(GDP,Ineq), statistic=allest, R=1000)
indices
unique(indices)
c
unique(indices)
indices
Q
allest <- function(data,indices) {
return(c(GDP=skewness(data[indices,1]),Ineq=skewness(data[indices,2]),corr=corr(data[indices,])))
}
results.all <- boot(data=cbind(GDP,Ineq), statistic=allest, R=1000)
results.all
hist(GDP)
hist(Ineq)
skewness(GDP)
skewness(Ineq)
results.all$t
mean(results.all$t[,1])
mean(results.all$t[,1]) - skewness(GDP)
results.all
plot(results.all)
plot(results.all$t[,1])
hist(results.all$t[,1])
hist(results.all$t[,2])
hist(results.all$t[,3])
boot.ci(boot.out = results.all, index = 1)   # For skewness of GDP
mu.hat=colMeans(cbind(GDP,Ineq))
sigma.hat=cov(cbind(GDP,Ineq))
rho.hat=corr(cbind(GDP,Ineq))
sigma.hat
mu.hat
rho.hat
library(mvtnorm)
install.packages(mvtnorm)
install.packages("mvtnorm")
help(rmvnorm)
muhat=colMeans(cbind(GDP,Ineq))
rho.hat.star=cov(cbind(GDP,Ineq))
for(i in 1:1000){
mysample= rmvnorm(n=length(GDP), mean = mu.hat, sigma=sigma.hat )
rho.hat.star[i]= corr(mysample)
}
library(mvtnorm)
muhat=colMeans(cbind(GDP,Ineq))
rho.hat.star=cov(cbind(GDP,Ineq))
for(i in 1:1000){
mysample= rmvnorm(n=length(GDP), mean = mu.hat, sigma=sigma.hat )
rho.hat.star[i]= corr(mysample)
}
rho.hat.star
ll=quantile(rho.hat.star,.025)
ul=quantile(rho.hat.star,.975)
boot.param.ci=c(ll,ul)
boot.param.ci
ll
ul
mean(GDP)
mean(GDP, Ineq)
mean(GDP), mean(Ineq)
c(mean(GDP), mean(Ineq))
mu.hat
boot.ci(boot.out = results.all, index = 3)  # For  Correlation
boot.ci(boot.out = results.all, index = 3, h = atanh, hinv = tanh)  # For  Correlation
# Select the 6 most populous states
UScrime.pop=UScrime[UScrime$Po1>120,]
# Attach the data
attach(UScrime.pop)
library(gregmisc)
sort(UScrime$Po1)
sort(UScrime$Po1,decreasing=T)
UScrime[sort(UScrime$Po1,decreasing=T), ]
UScrime[order(UScrime$Po1,decreasing=T), ]
UScrime[order(UScrime$Po1,decreasing=T), 1:6 ]
UScrime[order(UScrime$Po1,decreasing=T)[1:6],  ]
Ed
U2
rxy=cor(Ed,U2)
rxy.test=sqrt(6)*rxy/sqrt(1-rxy^2)
rxy.pval=1-2*qnorm(rxy.test)
rxy.pval=2*pnorm(rxy.test,lower.tail=F)
rxy.test
qnorm(rxy.test)
qnorm(1)
qnorm(0.99999)
qnorm(0)
qnorm(0.000001)
rxy=cor(Ed,U2)
rxy
sqrt(6)*rxy/sqrt(1-rxy^2)
qnorm(3)
rxy.pval=2*pnorm(rxy.test,lower.tail=F)
rxy.pval
pnorm(rxy.test,lower.tail=F)
pnorm(0)
pnorm(1)
qnorm(1)
qnorm(0.5)
qnorm(0.95)
qnorm(0.95)*2
# First generate all possible permutations of size 6
myperm=permutations(6,6)
myperm
rexp(1,2)
rexp(10,2)
rexp(10,10)
rexp(100,3)
hist(rexp(100,3))
# First generate all possible permutations of size 6
myperm=permutations(6,6)
tb=c()
for(i in 1:nrow(myperm)){
return()
# Permute only one of the two columns
tb[i]=cor(Ed,U2[myperm[i,]])
}
Ed
U2
myperm=permutations(6,6)
tb=c()
for(i in 1:nrow(myperm)){
browser()
# Permute only one of the two columns
tb[i]=cor(Ed,U2[myperm[i,]])
}
pval.param=(sum(abs(tb)>abs(rxy)) /nrow(myperm))
myperm
i
myperm[i,]
myperm[2,]
U2[myperm[2,]]
U2[myperm[3,]]
U2[myperm[4,]]
Ed
U2
cor(Ed, U2[myperm[4,]])
cor(Ed, U2[myperm[5,]])
cor(Ed, U2[myperm[6,]])
myperm=permutations(6,6)
tb=c()
for(i in 1:nrow(myperm)){
# Permute only one of the two columns
tb[i]=cor(Ed,U2[myperm[i,]])
}
pval.param=(sum(abs(tb)>abs(rxy)) /nrow(myperm))
pval.param
install.packages("bc3net")
ecdf(c(1,2,3))
ecdf(c(2,1,3))
ecdf(c(2,1,3,0))
ecdf(c(2,1,3,0,0.3))
aa = ecdf(c(2,1,3,0,0.3))
aa
plot(aa)
aa = ecdf(c(2,1,3,0,0.3,-0.1, 10))
plot(aa)
str(aa)
setwd("~/Desktop/PhDProject/mainp.timet/D-Arbeit.Eclipse.Workspace/ABC_numeric_sim")
require(rgl)  ## for 3D surface plotting
data.abc = read.table("abc_testvalues.txt")
# remove duplicates
data.abc = unique(data.abc)
open3d()
## plot surface
# rgl.surface(x=data.abc[,2], z=data.abc[,3], y=data.abc[,1], alpha=0.75, back="lines", color="black")
# rgl.points(x=data.abc[filter.idx, 2], z=data.abc[filter.idx, 4], y=data.abc[filter.idx,1], alpha=0.75, back="lines", color="black")
# exclude duplicates
x = unique(data.abc[, 3])
z = unique(data.abc[, 4])
y = matrix(NaN, nrow=length(x), ncol=length(z))
for(i in 1:length(x)) {
for(j in 1:length(z)) {
z.values = which(data.abc[,3] == x[i] & data.abc[,4] == z[j])
if(length(z.values) == 0)  y[i,j] = NaN # browser()
else y[i,j] = z.values[1 ]
}
cat(".")
}
dim(z)
dim(y)
y
y[,1]
y[,2]
rgl.points(x=x, z=z, y=y, alpha=0.75, back="lines", color="black")
y = matrix(NaN, nrow=length(x), ncol=length(z))
for(i in 1:length(x)) {
for(j in 1:length(z)) {
z.values = which(data.abc[,3] == x[i] & data.abc[,4] == z[j])
if(length(z.values) == 0)  y[i,j] = NaN # browser()
else y[i,j] = log(z.values[1 ])
}
cat(".")
}
rgl.points(x=x, z=z, y=y, alpha=0.75, back="lines", color="black")
y[,2]
rgl.points(x=x, z=z, y=y, alpha=0.75, back="lines", color="black")
max(y)
max(!is.nan(y)
)
y[!is.nan(y)]
max(y[!is.nan(y)])
open3d()
rgl.points(x=x, z=z, y=y, alpha=0.75, back="lines", color="black")
open3d()
rgl.points(x=x, z=z, y=y, alpha=0.75, back="lines", color="black")
ylim <- range(y[!is.nan(y)])
ylen <- ylim[2] - ylim[1] + 1
colorlut <- terrain.colors(ylen) # height color lookup table
col <- colorlut[ y-ylim[1]+1 ] # assign colors to heights for each point
open3d()
rgl.surface(x, z, y, color=col, back="lines")
open3d()
x <- sort(rnorm(1000))
y <- rnorm(1000)
z <- rnorm(1000) + atan2(x,y)
plot3d(x, y, z, col=rainbow(1000))
data.abc = read.table("abc_testvalues.txt")
# remove duplicates
data.abc = unique(data.abc)
x = data.abc[, 3]
z = data.abc[, 4]
y = log(data.abc[,1])
open3d()
plot3d(x, y, z, col=rainbow(1000))
min(data.abc[,1])
plot(data.abc[,2], data.abc[,1])
plot(data.abc[,2], log(data.abc[,1])
)
log(0.13)
log(1)
rgl.points(x=x, z=z, y=y, alpha=0.75, back="lines", color="black")
rgl.points(x=x, z=z, y=y, alpha=0.75, back="lines", color="black")
## option 2
open3d()
rgl.points(x=x, z=z, y=y, alpha=0.75, back="lines", color="black")
min(data.abc[,1])
which.min(data.abc[,1])
best.solution = data.abc[which.min(data.abc[,1]),]
cat("best solution, score:", best.solution[1], "betas: ", best.solution[2:4], "\n")
best.solution = data.abc[which.min(data.abc[,1]),]
cat("best solution, score:", best.solution[1], "betas: ")
print.table(best.solution[2:4])
best.solution[2]
best.solution
best.solution[2] + best.solution[3]*2 + best.solution[4]*3
(best.solution[2] + best.solution[3]*2 + best.solution[4]*3) - 0.3
((best.solution[2] + best.solution[3]*2 + best.solution[4]*3) - 0.3)^2
((best.solution[2] + best.solution[3]*2 + best.solution[4]*3) - 0.3)^2 + ((best.solution[2] + best.solution[3]*1.6 + best.solution[4]*0.7) + 9.79)^2
((best.solution[2] + best.solution[3]*1.6 + best.solution[4]*0.7) + 9.79)^2
((best.solution[2] + best.solution[3]*1.6 + best.solution[4]*0.7) - -9.79)^2
((best.solution[2] + best.solution[3]*1.6 + best.solution[4]*0.7) - -9.79)
(best.solution[2] + best.solution[3]*2 + best.solution[4]*3)
((best.solution[2] + best.solution[3]*1.6 + best.solution[4]*0.7)
)
data.abc = read.table("abc_testvalues.txt")
# remove duplicates
data.abc = unique(data.abc)
best.solution = data.abc[which.min(data.abc[,1]),]
cat("best solution, score:", best.solution[1], "betas: ")
print.table(best.solution[2:4])
x = data.abc[, 3]
z = data.abc[, 4]
y = log(data.abc[,1])
open3d()
rgl.points(x=x, z=z, y=y, alpha=0.75, back="lines", color="black")
open3d()
plot3d(x, y, z, col=rainbow(1000))
## option 2
open3d()
rgl.points(x=x, z=z, y=y, alpha=0.75, back="lines", color="black")
open3d()
rgl.points(x=x, z=z, y=(y*3), alpha=0.75, back="lines", color="black")
open3d()
scale.up = 5
rgl.points(x=x, z=z, y=(y*scale.up), alpha=0.75, back="lines", color="black")
## option 1
open3d()
plot3d(x, y, z, col=rainbow(1000),xlab=xlab, zlab=zlab, ylab=ylab)
open3d()
scale.up = 5
rgl.points(x=x, z=z, y=(y*scale.up), alpha=0.75, back="lines", color=rainbow(1000))
x = data.abc[, 3]
xlab = "beta_2"
z = data.abc[, 4]
zlab = "beta_3"
y = log(data.abc[,1])
ylab = "score"
## option 1
open3d()
plot3d(x, y, z, col=rainbow(1000),xlab=xlab, zlab=zlab, ylab=ylab)
x = data.abc[, 2]
xlab = "beta_1"
z = data.abc[, 3]
zlab = "beta_2"
y = log(data.abc[,1])
ylab = "score"
## option 1
open3d()
plot3d(x, y, z, col=rainbow(1000),xlab=xlab, zlab=zlab, ylab=ylab)
