# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _pso
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


sphere = _pso.sphere
rastrigin = _pso.rastrigin
rosenbrock = _pso.rosenbrock
schaffer = _pso.schaffer
griewank = _pso.griewank
ackley = _pso.ackley
schwefel = _pso.schwefel
levy5 = _pso.levy5
freudenstein = _pso.freudenstein
quadric = _pso.quadric
movingGoal = _pso.movingGoal
dynamic_rosenbrock = _pso.dynamic_rosenbrock
dynamic_rastrigin = _pso.dynamic_rastrigin
dynamic_griewank = _pso.dynamic_griewank
moving_peaks = _pso.moving_peaks
dynamic_levy = _pso.dynamic_levy
dynamic_ackley = _pso.dynamic_ackley
dynamic_schwefel = _pso.dynamic_schwefel
dynamic_sinusoidal = _pso.dynamic_sinusoidal
zitzler3 = _pso.zitzler3
optMax = _pso.optMax
optMin = _pso.optMin
staticFct = _pso.staticFct
dynamicFct = _pso.dynamicFct
noNoise = _pso.noNoise
noisyFunctionValue = _pso.noisyFunctionValue
noisyPosition = _pso.noisyPosition
noisyRelativeFunctionValue = _pso.noisyRelativeFunctionValue
randomOptMove = _pso.randomOptMove
linearOptMove = _pso.linearOptMove
randomLinearOptMove = _pso.randomLinearOptMove
randomDistanceOptMove = _pso.randomDistanceOptMove
exponentialLinearOptMove = _pso.exponentialLinearOptMove
updatePeriodic = _pso.updatePeriodic
updateOnGoal = _pso.updateOnGoal
updateRandom = _pso.updateRandom
class Function(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Function, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Function, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pso.new_Function(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pso.delete_Function
    __del__ = lambda self : None;
    def evaluate(*args): return _pso.Function_evaluate(*args)
    def noisyEvaluate(*args): return _pso.Function_noisyEvaluate(*args)
    def addNoisePos(*args): return _pso.Function_addNoisePos(*args)
    def addNoiseVal(*args): return _pso.Function_addNoiseVal(*args)
    def addNoiseRelativeVal(*args): return _pso.Function_addNoiseRelativeVal(*args)
    def update(*args): return _pso.Function_update(*args)
    def getGoal(*args): return _pso.Function_getGoal(*args)
    def getOpt(*args): return _pso.Function_getOpt(*args)
    def get_min_x(*args): return _pso.Function_get_min_x(*args)
    def get_max_x(*args): return _pso.Function_get_max_x(*args)
    def get_min_v(*args): return _pso.Function_get_min_v(*args)
    def get_max_v(*args): return _pso.Function_get_max_v(*args)
    def setNoiseStyle(*args): return _pso.Function_setNoiseStyle(*args)
    def setNoiseSigma(*args): return _pso.Function_setNoiseSigma(*args)
    def getNoiseStyle(*args): return _pso.Function_getNoiseStyle(*args)
    def getNoiseSigma(*args): return _pso.Function_getNoiseSigma(*args)
    def getDynamicStyle(*args): return _pso.Function_getDynamicStyle(*args)
    def getOptPosition(*args): return _pso.Function_getOptPosition(*args)
    def set_moveFrequency(*args): return _pso.Function_set_moveFrequency(*args)
    def set_moveDistance(*args): return _pso.Function_set_moveDistance(*args)
    def set_optMoveStyle(*args): return _pso.Function_set_optMoveStyle(*args)
    def set_updateStyle(*args): return _pso.Function_set_updateStyle(*args)
    def get_moveFrequency(*args): return _pso.Function_get_moveFrequency(*args)
    def get_moveDistance(*args): return _pso.Function_get_moveDistance(*args)
    def get_optMoveStyle(*args): return _pso.Function_get_optMoveStyle(*args)
    def get_updateStyle(*args): return _pso.Function_get_updateStyle(*args)
Function_swigregister = _pso.Function_swigregister
Function_swigregister(Function)

class Sphere(Function):
    __swig_setmethods__ = {}
    for _s in [Function]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sphere, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sphere, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pso.new_Sphere(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pso.delete_Sphere
    __del__ = lambda self : None;
    def evaluate(*args): return _pso.Sphere_evaluate(*args)
Sphere_swigregister = _pso.Sphere_swigregister
Sphere_swigregister(Sphere)

class Rosenbrock(Function):
    __swig_setmethods__ = {}
    for _s in [Function]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rosenbrock, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rosenbrock, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pso.new_Rosenbrock(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pso.delete_Rosenbrock
    __del__ = lambda self : None;
    def evaluate(*args): return _pso.Rosenbrock_evaluate(*args)
Rosenbrock_swigregister = _pso.Rosenbrock_swigregister
Rosenbrock_swigregister(Rosenbrock)

class Rastrigin(Function):
    __swig_setmethods__ = {}
    for _s in [Function]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rastrigin, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rastrigin, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pso.new_Rastrigin(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pso.delete_Rastrigin
    __del__ = lambda self : None;
    def evaluate(*args): return _pso.Rastrigin_evaluate(*args)
Rastrigin_swigregister = _pso.Rastrigin_swigregister
Rastrigin_swigregister(Rastrigin)

class Schaffer(Function):
    __swig_setmethods__ = {}
    for _s in [Function]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schaffer, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schaffer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pso.new_Schaffer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pso.delete_Schaffer
    __del__ = lambda self : None;
    def evaluate(*args): return _pso.Schaffer_evaluate(*args)
Schaffer_swigregister = _pso.Schaffer_swigregister
Schaffer_swigregister(Schaffer)

class Griewank(Function):
    __swig_setmethods__ = {}
    for _s in [Function]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Griewank, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Griewank, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pso.new_Griewank(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pso.delete_Griewank
    __del__ = lambda self : None;
    def evaluate(*args): return _pso.Griewank_evaluate(*args)
Griewank_swigregister = _pso.Griewank_swigregister
Griewank_swigregister(Griewank)

class Ackley(Function):
    __swig_setmethods__ = {}
    for _s in [Function]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ackley, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ackley, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pso.new_Ackley(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pso.delete_Ackley
    __del__ = lambda self : None;
    def evaluate(*args): return _pso.Ackley_evaluate(*args)
Ackley_swigregister = _pso.Ackley_swigregister
Ackley_swigregister(Ackley)

class Schwefel(Function):
    __swig_setmethods__ = {}
    for _s in [Function]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schwefel, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schwefel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pso.new_Schwefel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pso.delete_Schwefel
    __del__ = lambda self : None;
    def evaluate(*args): return _pso.Schwefel_evaluate(*args)
Schwefel_swigregister = _pso.Schwefel_swigregister
Schwefel_swigregister(Schwefel)

class Levy5(Function):
    __swig_setmethods__ = {}
    for _s in [Function]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Levy5, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Levy5, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pso.new_Levy5(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pso.delete_Levy5
    __del__ = lambda self : None;
    def evaluate(*args): return _pso.Levy5_evaluate(*args)
Levy5_swigregister = _pso.Levy5_swigregister
Levy5_swigregister(Levy5)

class Freudenstein(Function):
    __swig_setmethods__ = {}
    for _s in [Function]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Freudenstein, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Freudenstein, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pso.new_Freudenstein(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pso.delete_Freudenstein
    __del__ = lambda self : None;
    def evaluate(*args): return _pso.Freudenstein_evaluate(*args)
Freudenstein_swigregister = _pso.Freudenstein_swigregister
Freudenstein_swigregister(Freudenstein)

class Quadric(Function):
    __swig_setmethods__ = {}
    for _s in [Function]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quadric, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Quadric, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pso.new_Quadric(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pso.delete_Quadric
    __del__ = lambda self : None;
    def evaluate(*args): return _pso.Quadric_evaluate(*args)
Quadric_swigregister = _pso.Quadric_swigregister
Quadric_swigregister(Quadric)

class MovingGoal(Function):
    __swig_setmethods__ = {}
    for _s in [Function]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MovingGoal, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MovingGoal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pso.new_MovingGoal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pso.delete_MovingGoal
    __del__ = lambda self : None;
    def evaluate(*args): return _pso.MovingGoal_evaluate(*args)
MovingGoal_swigregister = _pso.MovingGoal_swigregister
MovingGoal_swigregister(MovingGoal)

class MovingPeaks(Function):
    __swig_setmethods__ = {}
    for _s in [Function]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MovingPeaks, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MovingPeaks, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pso.new_MovingPeaks(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pso.delete_MovingPeaks
    __del__ = lambda self : None;
    def evaluate(*args): return _pso.MovingPeaks_evaluate(*args)
    def update(*args): return _pso.MovingPeaks_update(*args)
    def set_moveDistance(*args): return _pso.MovingPeaks_set_moveDistance(*args)
MovingPeaks_swigregister = _pso.MovingPeaks_swigregister
MovingPeaks_swigregister(MovingPeaks)

class Sinusoidal(Function):
    __swig_setmethods__ = {}
    for _s in [Function]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sinusoidal, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sinusoidal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pso.new_Sinusoidal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pso.delete_Sinusoidal
    __del__ = lambda self : None;
    def evaluate(*args): return _pso.Sinusoidal_evaluate(*args)
    def update(*args): return _pso.Sinusoidal_update(*args)
Sinusoidal_swigregister = _pso.Sinusoidal_swigregister
Sinusoidal_swigregister(Sinusoidal)

class Zitzler3(Function):
    __swig_setmethods__ = {}
    for _s in [Function]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Zitzler3, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Zitzler3, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pso.new_Zitzler3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pso.delete_Zitzler3
    __del__ = lambda self : None;
    def evaluate(*args): return _pso.Zitzler3_evaluate(*args)
    def update(*args): return _pso.Zitzler3_update(*args)
Zitzler3_swigregister = _pso.Zitzler3_swigregister
Zitzler3_swigregister(Zitzler3)

seqSwarm = _pso.seqSwarm
pyramidSwarm = _pso.pyramidSwarm
ringSwarm = _pso.ringSwarm
localSwarm = _pso.localSwarm
scoutSwarm = _pso.scoutSwarm
dynamicPyramidSwarm = _pso.dynamicPyramidSwarm
adaptivePyramidSwarm = _pso.adaptivePyramidSwarm
upToDate = _pso.upToDate
gbestDetectChange = _pso.gbestDetectChange
scoutDetectChange = _pso.scoutDetectChange
noDetect = _pso.noDetect
hierarchyChangeDetect = _pso.hierarchyChangeDetect
omniscientDetect = _pso.omniscientDetect
noResponse = _pso.noResponse
applyScoutResponse = _pso.applyScoutResponse
randomize10 = _pso.randomize10
randomize10reset = _pso.randomize10reset
randomize16reset = _pso.randomize16reset
randomize22reset = _pso.randomize22reset
subSwarmsTemporalMerge = _pso.subSwarmsTemporalMerge
subSwarmsAdaptiveMerge = _pso.subSwarmsAdaptiveMerge
subSwarmsTemporalMergeNoMemory = _pso.subSwarmsTemporalMergeNoMemory
subSwarmsAdaptiveMergeNoMemory = _pso.subSwarmsAdaptiveMergeNoMemory
randomize40reset = _pso.randomize40reset
updateOnly = _pso.updateOnly
randomize50reset = _pso.randomize50reset
resetAll = _pso.resetAll
noAction = _pso.noAction
bestSubtreeNoAction = _pso.bestSubtreeNoAction
reset = _pso.reset
bestSubtreeReset = _pso.bestSubtreeReset
noReuse = _pso.noReuse
reuseContinuousAverage = _pso.reuseContinuousAverage
reuseLastBestValue = _pso.reuseLastBestValue
nolocalsearch = _pso.nolocalsearch
doLocalsearch = _pso.doLocalsearch
sidestep = _pso.sidestep
class PSO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSO, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pso.new_PSO(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pso.delete_PSO
    __del__ = lambda self : None;
    def printParameter(*args): return _pso.PSO_printParameter(*args)
    def getSidestepStats(*args): return _pso.PSO_getSidestepStats(*args)
    def localSearch(*args): return _pso.PSO_localSearch(*args)
    def setDynamicParameters(*args): return _pso.PSO_setDynamicParameters(*args)
    def setNoiseParameters(*args): return _pso.PSO_setNoiseParameters(*args)
    def setAdaptiveParameters(*args): return _pso.PSO_setAdaptiveParameters(*args)
    def setLocalsearchParameters(*args): return _pso.PSO_setLocalsearchParameters(*args)
    def step(*args): return _pso.PSO_step(*args)
    def get_dim(*args): return _pso.PSO_get_dim(*args)
    def get_w(*args): return _pso.PSO_get_w(*args)
    def get_c1(*args): return _pso.PSO_get_c1(*args)
    def get_c2(*args): return _pso.PSO_get_c2(*args)
    def get_constriction(*args): return _pso.PSO_get_constriction(*args)
    def getSwarm(*args): return _pso.PSO_getSwarm(*args)
    def getSwarmType(*args): return _pso.PSO_getSwarmType(*args)
    def get_functionType(*args): return _pso.PSO_get_functionType(*args)
    def apply_vmax(*args): return _pso.PSO_apply_vmax(*args)
    def getMax(*args): return _pso.PSO_getMax(*args)
    def getStep(*args): return _pso.PSO_getStep(*args)
    def isBetter(*args): return _pso.PSO_isBetter(*args)
    def isBetterEqual(*args): return _pso.PSO_isBetterEqual(*args)
    def evalFunction(*args): return _pso.PSO_evalFunction(*args)
    def iterationDone(*args): return _pso.PSO_iterationDone(*args)
    __swig_setmethods__["stat"] = _pso.PSO_stat_set
    __swig_getmethods__["stat"] = _pso.PSO_stat_get
    if _newclass:stat = _swig_property(_pso.PSO_stat_get, _pso.PSO_stat_set)
    __swig_setmethods__["optFunction"] = _pso.PSO_optFunction_set
    __swig_getmethods__["optFunction"] = _pso.PSO_optFunction_get
    if _newclass:optFunction = _swig_property(_pso.PSO_optFunction_get, _pso.PSO_optFunction_set)
    def set_detectionMethod(*args): return _pso.PSO_set_detectionMethod(*args)
    def set_responseMethod(*args): return _pso.PSO_set_responseMethod(*args)
    def get_detectionMethod(*args): return _pso.PSO_get_detectionMethod(*args)
    def get_responseMethod(*args): return _pso.PSO_get_responseMethod(*args)
    def getActualHeight(*args): return _pso.PSO_getActualHeight(*args)
    def getActualBranches(*args): return _pso.PSO_getActualBranches(*args)
    def getBird(*args): return _pso.PSO_getBird(*args)
    def getBestValue(*args): return _pso.PSO_getBestValue(*args)
    def getCurrValue(*args): return _pso.PSO_getCurrValue(*args)
    def getVel(*args): return _pso.PSO_getVel(*args)
    def getPos(*args): return _pso.PSO_getPos(*args)
    def getBestPos(*args): return _pso.PSO_getBestPos(*args)
    def getGlobalBestPos(*args): return _pso.PSO_getGlobalBestPos(*args)
    def getOptPosition(*args): return _pso.PSO_getOptPosition(*args)
    def getDistanceToGoal(*args): return _pso.PSO_getDistanceToGoal(*args)
    def getMeanPosition(*args): return _pso.PSO_getMeanPosition(*args)
    def getAverageDiversity(*args): return _pso.PSO_getAverageDiversity(*args)
    def getMedianDiversity(*args): return _pso.PSO_getMedianDiversity(*args)
    def getAverageDiversitySubtree(*args): return _pso.PSO_getAverageDiversitySubtree(*args)
    def getMedianDiversitySubtree(*args): return _pso.PSO_getMedianDiversitySubtree(*args)
    def getLevel(*args): return _pso.PSO_getLevel(*args)
    def getSubtree(*args): return _pso.PSO_getSubtree(*args)
    def getDynamicStyle(*args): return _pso.PSO_getDynamicStyle(*args)
    def getNoiseStyle(*args): return _pso.PSO_getNoiseStyle(*args)
    def getOfflinePerformance(*args): return _pso.PSO_getOfflinePerformance(*args)
    def getOfflineError(*args): return _pso.PSO_getOfflineError(*args)
    def getCurrentError(*args): return _pso.PSO_getCurrentError(*args)
    def getBestValueSamples(*args): return _pso.PSO_getBestValueSamples(*args)
    def getNrNoisySwapChecks(*args): return _pso.PSO_getNrNoisySwapChecks(*args)
    def getNoisyReuseOldValue(*args): return _pso.PSO_getNoisyReuseOldValue(*args)
    def getNoisyRefineBestValue(*args): return _pso.PSO_getNoisyRefineBestValue(*args)
    def getNoisyFirstComparePbestValues(*args): return _pso.PSO_getNoisyFirstComparePbestValues(*args)
    def getHierachyChangeDetectThreshold(*args): return _pso.PSO_getHierachyChangeDetectThreshold(*args)
    def isAdaptiveParametersSet(*args): return _pso.PSO_isAdaptiveParametersSet(*args)
    def getDecreaseBranchFrequency(*args): return _pso.PSO_getDecreaseBranchFrequency(*args)
    def getMinBranchDegree(*args): return _pso.PSO_getMinBranchDegree(*args)
    def getDecreaseBranchStep(*args): return _pso.PSO_getDecreaseBranchStep(*args)
    def getDecreaseBranchAction(*args): return _pso.PSO_getDecreaseBranchAction(*args)
    def isDynamicChange(*args): return _pso.PSO_isDynamicChange(*args)
    def getLocalsearchMode(*args): return _pso.PSO_getLocalsearchMode(*args)
    def getInitialSidestepWidth(*args): return _pso.PSO_getInitialSidestepWidth(*args)
    def getSidestepMagnitude(*args): return _pso.PSO_getSidestepMagnitude(*args)
PSO_swigregister = _pso.PSO_swigregister
PSO_swigregister(PSO)

class PsoStatistics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsoStatistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PsoStatistics, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pso.new_PsoStatistics(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pso.delete_PsoStatistics
    __del__ = lambda self : None;
    def addGlobalBest(*args): return _pso.PsoStatistics_addGlobalBest(*args)
    def addActualGlobalBest(*args): return _pso.PsoStatistics_addActualGlobalBest(*args)
    def addIterationBest(*args): return _pso.PsoStatistics_addIterationBest(*args)
    def addCurrentError(*args): return _pso.PsoStatistics_addCurrentError(*args)
    def addGbestInSubswarm(*args): return _pso.PsoStatistics_addGbestInSubswarm(*args)
    def initAverage(*args): return _pso.PsoStatistics_initAverage(*args)
    def addAverage(*args): return _pso.PsoStatistics_addAverage(*args)
    def finishAverage(*args): return _pso.PsoStatistics_finishAverage(*args)
    def swapped(*args): return _pso.PsoStatistics_swapped(*args)
    def evaluated(*args): return _pso.PsoStatistics_evaluated(*args)
    def changeDetected(*args): return _pso.PsoStatistics_changeDetected(*args)
    def getGlobalBest(*args): return _pso.PsoStatistics_getGlobalBest(*args)
    def getActualGlobalBest(*args): return _pso.PsoStatistics_getActualGlobalBest(*args)
    def getIterationBest(*args): return _pso.PsoStatistics_getIterationBest(*args)
    def getAverage(*args): return _pso.PsoStatistics_getAverage(*args)
    def getNrSwapped(*args): return _pso.PsoStatistics_getNrSwapped(*args)
    def getNrSwappedAt(*args): return _pso.PsoStatistics_getNrSwappedAt(*args)
    def getCurrentNrSwapped(*args): return _pso.PsoStatistics_getCurrentNrSwapped(*args)
    def getNrSwappedLevel(*args): return _pso.PsoStatistics_getNrSwappedLevel(*args)
    def getNrEvaluations(*args): return _pso.PsoStatistics_getNrEvaluations(*args)
    def isChangeDetected(*args): return _pso.PsoStatistics_isChangeDetected(*args)
    def getCurrentError(*args): return _pso.PsoStatistics_getCurrentError(*args)
    def getGbestInSubswarm(*args): return _pso.PsoStatistics_getGbestInSubswarm(*args)
    def addDiversitySubtree(*args): return _pso.PsoStatistics_addDiversitySubtree(*args)
    def getDiversitySubtree(*args): return _pso.PsoStatistics_getDiversitySubtree(*args)
    def psoStepDone(*args): return _pso.PsoStatistics_psoStepDone(*args)
    def goalReached(*args): return _pso.PsoStatistics_goalReached(*args)
    def getGoalReachedStep(*args): return _pso.PsoStatistics_getGoalReachedStep(*args)
    def optReached(*args): return _pso.PsoStatistics_optReached(*args)
    def getOptReachedStep(*args): return _pso.PsoStatistics_getOptReachedStep(*args)
    def getCurrentStep(*args): return _pso.PsoStatistics_getCurrentStep(*args)
    __swig_setmethods__["currNrSwapped"] = _pso.PsoStatistics_currNrSwapped_set
    __swig_getmethods__["currNrSwapped"] = _pso.PsoStatistics_currNrSwapped_get
    if _newclass:currNrSwapped = _swig_property(_pso.PsoStatistics_currNrSwapped_get, _pso.PsoStatistics_currNrSwapped_set)
    def calculateSidestepStats(*args): return _pso.PsoStatistics_calculateSidestepStats(*args)
PsoStatistics_swigregister = _pso.PsoStatistics_swigregister
PsoStatistics_swigregister(PsoStatistics)



