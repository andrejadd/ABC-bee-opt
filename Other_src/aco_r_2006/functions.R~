
#######################################################################
#
# functions.R - R implementation of popular test functions for both
#							  continuous and mixed-variable optimization problems
#
# Copyright (c) 2006 by Krzysztof Socha (ksocha@ulb.ac.be)
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#

#######################################################################
#
# Each test function 'foo' is defined as a set of objects described
# below. Each function is considered to be a maximization problem (any
# optimization function may be easily translated to such problem). 
#
# First object (foo.d) is a list that is the domain definition - for each
# variable the variable type must be defined as one of the following:
#   u - unordered descrete variable
#   o - ordered descrete variable
#   x - continuous variable
# Following the variable type, the domain must be defined for each 
# variable. For "u" and "o" variables, all possible values must be 
# specified. For "x" variable the lower and upper bound must be given.
# 
# NOTE: All the descrete variables MUST be defined before any continuous
#       variables!
# 
# Second object (foo.tf) is a function performing the mapping from 
# the values generated by the algorithm to the values from the defined
# earlier domain. Usually for continuous and ordered variables, there 
# is direct mapping, and for unordered - categorical - variables 
# there is a mapping from the index number to the actual value.
# There may be some additional translations or repair mechanisms 
# implemented as well - an option left for the designer. See example
# test functions for details how this may be done.
#
# Third object (foo.f) is the actual obejctive function. The first 
# function that is called must be the foo.tf function in order to mapp 
# the values generated by the algorithm to the actual values from the 
# respective variables' domains. Only then the actual objective function
# value may be calculated and returned.
#
# Finally the last object is a collection of all the previous objects
# of the form:
#		foo <- c(f=foo.f,d=list(foo.d),tf=foo.tf,opt=<optimal value>)
# where the <optimal value> is the known a priori optimal value of the 
# objective function. If the optimal value is not known, it is sufficient
# to specify a high enough value (reminder: all functions are considered
# to be maximization problems).
#
# Below, a template of a function is given. Additional insight into 
# designing test functions may be obtained through the analysis of the 
# (really many) examples provided.
#

#######################################################################
# Test Function Template (FOO)
#
# foo.d <- list(
#		list("<variable type>",<domain>),
#		.
#		.
#		.
#		list("<variable type>",<domain>))
#
#	foo.tf <- function(u,o,x) {
#		<mapping: X <- f(u,o,x)>
#		return(X)
# }
#
# foo.f <- function(u,o,x) {
#		X <- foo.tf(u,o,x)
#		<function body: y <- f(X)>
#		return(y)
# }
#
# foo <- c(f=foo.f,d=list(foo.d),tf=foo.tf,opt=<optimal value>)


# load required utility functions
source("utilities.R")


#######################################################################
#
# Continuous Test Functions
# 
#######################################################################

#######################################################################
# Easom (ES)
#
# Dim:    : 2
# Domain  : (-100,100)^2
# Optimum : f=1; (pi,pi)

es.d <- list(
	list("x",c(-100,100)),
	list("x",c(-100,100)))

es.tf <- function(u,o,x) {
	X <- x
	return(X)
}

es.f <- function(u,o,x) {
	x <- es.tf(u,o,x)
  return (cos(x[,1])*cos(x[,2])*exp(-((x[,1]-pi)^2+(x[,2]-pi)^2)))
}

es <- c(f=es.f,d=list(es.d),tf=es.tf,opt=1)


#######################################################################
# Branin RCOS (RC)
#
# Dim:    : 2
# Domain  : (-5,15)^2 
# Optimum : ~ -0.397887

rc.d <- list(
	list("x",c(-5,15)),
	list("x",c(-5,15)))

rc.tf <- function(u,o,x) {
	X <- x
	return(X)
}

rc.f <- function(u,o,x) {
	x <- rc.tf(u,o,x)
  return(-((x[,2]-(5/(4*pi^2))*x[,1]^2+(5/pi)*
    x[,1]-6)^2+10*(1-(1/(8*pi)))*cos(x[,1])+10))
}

rc <- c(f=rc.f,d=list(rc.d),tf=rc.tf,opt=-0.397887)


#######################################################################
# B2
#
# Dim:    : 2
# Domain  : [-100,100]^2
# Optimum : 0 @ (0,0)

b2.d <- list(
	list("x",c(-100,100)),
	list("x",c(-100,100)))

b2.tf <- function(u,o,x) {
	X <- x
	return(X)
}

b2.f <- function(u,o,x) {
	x <- b2.tf(u,o,x)
  return(-(x[,1]^2+2*x[,2]^2-0.3*cos(3*pi*
    x[,1])-0.4*cos(4*pi*x[,2])+0.7))
}

b2 <- c(f=b2.f,d=list(b2.d),tf=b2.tf,opt=0)


#######################################################################
# Goldstein and Price (GP)
#
# Dim:    : 2
# Domain  : [-2,2]^2
# Optimum : -3 @ (0,-1)

gp.d <- list(
	list("x",c(-2,2)),
	list("x",c(-2,2)))

gp.tf <- function(u,o,x) {
	X <- x
	return(X)
}

gp.f <- function(u,o,x) {
	x <- gp.tf(u,o,x)
  return(-(1+(x[,1]+x[,2]+1)^2*(19-14*x[,1]+13*x[,1]^2-14*x[,2]+6*
    x[,1]*x[,2]+3*x[,2]^2))*(30+(2*x[,1]-3*x[,2])^2*(18-32*x[,1]+12*
    x[,1]^2+48*x[,2]-36*x[,1]*x[,2]+27*x[,2]^2)))
}

gp <- c(f=gp.f,d=list(gp.d),tf=gp.tf,opt=-3)


#######################################################################
# Martin & Gaddy (MG)
#
# Dim:    : 2
# Domain  : [-20,20]^2 
# Optimum : 0 @ (5,5)

mg.d <- list(
	list("x",c(-20,20)),
	list("x",c(-20,20)))

mg.tf <- function(u,o,x) {
	X <- x
	return(X)
}

mg.f <- function(u,o,x) {
	x <- mg.tf(u,o,x)
  return(-((x[,1]-x[,2])^2+((x[,1]+x[,2]-10)/3)^2))
}

mg <- c(f=mg.f,d=list(mg.d),tf=mg.tf,opt=0)


#######################################################################
# De Jong (DJ)
#
# Dim:    : 3
# Domain  : [-5.12,5.12]^3
# Optimum : 0 @ (0,0,0)

dj.d <- list(
	list("x",c(-5.12,5.12)),
	list("x",c(-5.12,5.12)),
	list("x",c(-5.12,5.12)))

dj.tf <- function(u,o,x) {
	X <- x
	return(X)
}

dj.f <- function(u,o,x) {
	x <- dj.tf(u,o,x)
  return(-(x[,1]^2+x[,2]^2+x[,3]^2))
}

dj <- c(f=dj.f,d=list(dj.d),tf=dj.tf,opt=0)


#######################################################################
# Sphere Model (SM)
#
# Dim:    : n
# Domain  : [-5.12,5.12]^n or [-100,100]^n
# Optimum : 0@(0,0)
# Comment : Now defined for n=6, but may be easily modified.

sm.d <- list(
	list("x",c(-5.12,5.12)),
	list("x",c(-5.12,5.12)),
	list("x",c(-5.12,5.12)),
	list("x",c(-5.12,5.12)),
	list("x",c(-5.12,5.12)),
	list("x",c(-5.12,5.12)))

sm.tf <- function(u,o,x) {
	X <- x
	return(X)
}

sm.f <- function(u,o,x) {
	x <- sm.tf(u,o,x)
  Y <- rep(0,dim(x)[1])
  for (j in 1:(dim(x)[2])) {
    Y <- Y + (x[,j])^2
  }
  return(-Y)
}

sm <- c(f=sm.f,d=list(sm.d),tf=sm.tf,opt=0)


#######################################################################
# Hartmann (H3,4)
#
# Dim:    : 3
# Domain  : [0,1]^3
# Optimum : 3.86278

h34.d <- list(
	list("x",c(0,1)),
	list("x",c(0,1)),
	list("x",c(0,1)))

h34.tf <- function(u,o,x) {
	X <- x
	return(X)
}

h34.f <- function(u,o,x) {
	x <- h34.tf(u,o,x)
  c <- c(1.0, 1.2, 3.0, 3.2)
  a <- c(c(3.0, 0.1, 3.0, 0.1), c(10, 10, 10, 10), c(30, 35, 30, 35))
  dim(a) <- c(4,3)
  p <- c(
    c(0.3689, 0.4699, 0.1091, 0.0381), 
    c(0.1170, 0.4387, 0.8732, 0.5743), 
    c(0.2673, 0.7470, 0.5547, 0.8828))
  dim(p) <- c(4,3)
  Y <- rep(0,dim(x)[1])
  for (i in 1:4) {
    y <- rep(0,dim(x)[1])
    for (j in 1:3) {
        y <- y + a[i,j]*(x[,j]-p[i,j])^2
    }
    Y <- Y - c[i]*exp(-y)
  }
  return (-Y)
}

h34 <- c(f=h34.f,d=list(h34.d),tf=h34.tf,opt=3.86278)


#######################################################################
# Hartmann (H6,4)
#
# Dim:    : 6
# Domain  : [0,1]^6
# Optimum : 3.334236

h64.d <- list(
	list("x",c(0,1)),
	list("x",c(0,1)),
	list("x",c(0,1)),
	list("x",c(0,1)),
	list("x",c(0,1)),
	list("x",c(0,1)))

h64.tf <- function(u,o,x) {
	X <- x
	return(X)
}

h64.f <- function(u,o,x) {
	x <- h64.tf(u,o,x)
  c <- c(1.0, 1.2, 3.0, 3.2)
  a <- c(
    c(10, 3, 17, 3.5, 1.7, 8), 
    c(0.05, 10, 17, 0.1, 8, 14), 
    c(3, 3.5, 1.7, 10, 17, 8), 
    c(17, 8, 0.05, 10, 0.1, 14))
  dim(a) <- c(4,6)
  p <- c(
    c(0.1312, 0.1696, 0.5569, 0.0124, 0.8283, 0.5886), 
    c(0.2329, 0.4135, 0.8307, 0.3736, 0.1004, 0.9991), 
    c(0.2348, 0.1451, 0.3522, 0.2883, 0.3047, 0.6650), 
    c(0.4047, 0.8828, 0.8732, 0.5743, 0.1091, 0.0381))
  dim(p) <- c(4,6)
  Y <- rep(0,dim(x)[1])
  for (i in 1:4) {
    y <- rep(0,dim(x)[1])
    for (j in 1:6) {
        y <- y + a[i,j]*(x[,j]-p[i,j])^2
    }
    Y <- Y - c[i]*exp(-y)
  }
  return (-Y)
}

h64 <- c(f=h64.f,d=list(h64.d),tf=h64.tf,opt=3.334236)


#######################################################################
# Shekel (S4,p)
#
# Dim:    : 4
# Domain  : [0,10]^4
# Optimum : 10.1532 : p=5, 10.40294 : p=7, 10.53641 : p=10

s4p.d <- list(
	list("x",c(0,10)),
	list("x",c(0,10)),
	list("x",c(0,10)),
	list("x",c(0,10)))

s4p.tf <- function(u,o,x) {
	X <- x
	return(X)
}

s4p.f <- function(u,o,x,p) {
	x <- s4p.tf(u,o,x)
  ai <- c(
    c(4, 4, 4, 4), c(1, 1, 1, 1), c(8, 8, 8, 8), 
    c(6, 6, 6, 6), c(3, 7, 3, 7), c(2, 9, 2, 9), 
    c(5, 5, 3, 3), c(8, 1, 8, 1), c(6, 2, 6, 2), c(7, 3.6, 7, 3.6))
  dim(ai) <- c(4,10)
  ai <- t(ai)
  ci <- c(0.1, 0.2, 0.2, 0.4, 0.4, 0.6, 0.3, 0.7, 0.5, 0.5)
  Y <- rep(0,dim(x)[1])
  for (i in 1:p) {
    aii <-  t(matrix(ai[i,],4,dim(x)[1]))
    Y <- Y - 1 / (diag((x - aii) %*% t(x - aii)) + ci[i])
  }
  return(-Y)
}

s45.f <- function(u,o,x,p=5) {
  s4p.f(NULL,NULL,x,p)
}
s45 <- c(f=s45.f,d=list(s4p.d),tf=s4p.tf,opt=10.1532)

s47.f <- function(u,o,x,p=7) {
  s4p.f(NULL,NULL,x,p)
}
s47 <- c(f=s47.f,d=list(s4p.d),tf=s4p.tf,opt=10.40294)

s410.f <- function(u,o,x,p=10) {
  s4p.f(NULL,NULL,x,p)
}
s410 <- c(f=s410.f,d=list(s4p.d),tf=s4p.tf,opt=10.53641)


#######################################################################
# Rosenbrock (Rn)
#
# Dim:    : n
# Domain  : [-5,10]^n or [-5,5]^n
# Optimum : 0 @ (1,..,1)
# Comment : Now defined for n=2, but may be easily modified.

rn.d <- list(
	list("x",c(-5,10)),
	list("x",c(-5,10)))

rn.tf <- function(u,o,x) {
	X <- x
	return(X)
}

rn.f <- function(u,o,x) {
	x <- rn.tf(u,o,x)
  Y <- rep(0,dim(x)[1])
  for (j in 1:(dim(x)[2]-1)) {
    Y <- Y + 100*(x[,j]^2-x[,j+1])^2+(x[,j]-1)^2
  }
  return(-Y)
}

rn <- c(f=rn.f,d=list(rn.d),tf=rn.tf,opt=0)


#######################################################################
# Zakharov (Zn)
#
# Dim:    : n
# Domain  : [-5,10]^n
# Optimum : 0 @ (0,...,0)
# Comment : Now defined for n=2, but may be easily modified.

zn.d <- list(
	list("x",c(-5,10)),
	list("x",c(-5,10)))

zn.tf <- function(u,o,x) {
	X <- x
	return(X)
}

zn.f <- function(u,o,x) {
	x <- zn.tf(u,o,x)
  Y.1 <- rep(0,dim(x)[1])
  for (j in 1:dim(x)[2]) {
    Y.1 <- Y.1 + x[,j]^2
  }
  Y.2 <- rep(0,dim(x)[1])
  for (j in 1:dim(x)[2]) {
    Y.2 <- Y.2 + 0.5*j*x[,j]^2
  }
  Y.3 <- rep(0,dim(x)[1])
  for (j in 1:dim(x)[2]) {
    Y.3 <- Y.3 + 0.5*j*x[,j]^2
  }
  return(-Y.1-Y.2^2-Y.3^4)
}

zn <- c(f=zn.f,d=list(zn.d),tf=zn.tf,opt=0)


#######################################################################
# Griewank (Gr_n)
#
# Dim:    : n
# Domain  : [-5.12,5.12]^n
# Optimum : 0 @ (0,...,0)
# Comment : Now defined for n=10, but may be easily modified.

gr.d <- list(
	list("x",c(-5.12,5.12)),
	list("x",c(-5.12,5.12)),
	list("x",c(-5.12,5.12)),
	list("x",c(-5.12,5.12)),
	list("x",c(-5.12,5.12)),
	list("x",c(-5.12,5.12)),
	list("x",c(-5.12,5.12)),
	list("x",c(-5.12,5.12)),
	list("x",c(-5.12,5.12)),
	list("x",c(-5.12,5.12)))

gr.tf <- function(u,o,x) {
	X <- x
	return(X)
}

gr.f <- function(u,o,x) {
	x <- gr.tf(u,o,x)
  Y1 <- rep(0,dim(x)[1])
  Y2 <- rep(1,dim(x)[1])
  for (j in 1:(dim(x)[2])) {
    Y1 <- Y1 + (1/4000)*x[,j]^2
    Y2 <- Y2 * cos(x[,j]/sqrt(j))
  }
  Y <- Y1 - Y2 + 1
  return(-Y)
}

gr <- c(f=gr.f,d=list(gr.d),tf=gr.tf,opt=0)


#######################################################################
# Plane (pl)
#
# Dim:    : n
# Domain  : [0.5,1.5]^n
# Optimum : 0
# Comment : Now defined for n=10, but may be easily modified.

pl.d <- list(
	list("x",c(0.5,1.5)),
	list("x",c(0.5,1.5)),
	list("x",c(0.5,1.5)),
	list("x",c(0.5,1.5)),
	list("x",c(0.5,1.5)),
	list("x",c(0.5,1.5)),
	list("x",c(0.5,1.5)),
	list("x",c(0.5,1.5)),
	list("x",c(0.5,1.5)),
	list("x",c(0.5,1.5)))

pl.tf <- function(u,o,x) {
	X <- x
	return(X)
}

pl.f <- function(u,o,x) {
	x <- pl.tf(u,o,x)
  return(x[,1]-10^10+1)
}

pl <- c(f=pl.f,d=list(pl.d),tf=pl.tf,opt=0)


#######################################################################
# Diagonal Plane (dp)
#
# Dim:    : n
# Domain  : [0.5,1.5]^n
# Optimum : 0
# Comment : Now defined for n=10, but may be easily modified.

dp.d <- list(
	list("x",c(0.5,1.5)),
	list("x",c(0.5,1.5)),
	list("x",c(0.5,1.5)),
	list("x",c(0.5,1.5)),
	list("x",c(0.5,1.5)),
	list("x",c(0.5,1.5)),
	list("x",c(0.5,1.5)),
	list("x",c(0.5,1.5)),
	list("x",c(0.5,1.5)),
	list("x",c(0.5,1.5)))

dp.tf <- function(u,o,x) {
	X <- x
	return(X)
}

dp.f <- function(u,o,x) {
	x <- dp.tf(u,o,x)
  Y <- rep(0,dim(x)[1])
  for (j in 1:(dim(x)[2])) {
    Y <- Y + (x[,j])
  }
  return((Y-10^10+1)/dim(x)[2])
}

dp <- c(f=dp.f,d=list(dp.d),tf=dp.tf,opt=0)


#######################################################################
# Ellipsoid (EL)
#
# Dim:    : n
# Domain  : [-3,7]^n
# Optimum : 0 @ (0,..,0)
# Comment : Now defined for n=10, but may be easily modified.

el.d <- list(
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)))

el.tf <- function(u,o,x) {
	X <- x
	return(X)
}

el.f <- function(u,o,x) {
	x <- el.tf(u,o,x)
  Y <- rep(0,dim(x)[1])
  for (j in 1:(dim(x)[2])) {
    Y <- Y + (100^((j-1)/(dim(x)[2]-1))*x[,j])^2
  }
  return(-Y)
}

el <- c(f=el.f,d=list(el.d),tf=el.tf,opt=0)


#######################################################################
# Cigar (CG)
#
# Dim:    : n
# Domain  : [-3,7]^n
# Optimum : 0 @ (0,..,0)
# Comment : Now defined for n=10, but may be easily modified.

cg.d <- list(
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)))

cg.tf <- function(u,o,x) {
	X <- x
	return(X)
}

cg.f <- function(u,o,x) {
	x <- cg.tf(u,o,x)
  Y <- x[,1]^2
  for (j in 2:(dim(x)[2])) {
    Y <- Y + 10^4*x[,j]^2
  }
  return(-Y)
}

cg <- c(f=cg.f,d=list(cg.d),tf=cg.tf,opt=0)


#######################################################################
# Tablet (TB)
#
# Dim:    : n
# Domain  : [-3,7]^n
# Optimum : 0 @ (0,..,0)
# Comment : Now defined for n=10, but may be easily modified.

tb.d <- list(
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)))

tb.tf <- function(u,o,x) {
	X <- x
	return(X)
}

tb.f <- function(u,o,x) {
	x <- tb.tf(u,o,x)
  Y <- 10^4*x[,1]^2
  for (j in 2:(dim(x)[2])) {
    Y <- Y + x[,j]^2
  }
  return(-Y)
}

tb <- c(f=tb.f,d=list(tb.d),tf=tb.tf,opt=0)


#######################################################################
# Ellipsoid (randomly rotated) (rEL)
#
# Dim:    : n
# Domain  : [-3,7]^n
# Optimum : 0 @ (0,..,0)
# Comment : Now defined for n=10, but may be easily modified.
#           This test function requires rel.R global matrix to be
#						defined (preferably using gen.R utility function).

rel.d <- list(
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)))

rel.tf <- function(u,o,x) {
	X <- x
	return(X)
}

rel.f <- function(u,o,x) {
	x <- rel.tf(u,o,x)
  rx <- t(rel.R %*% t(x))
  Y <- rep(0,dim(rx)[1])
  for (j in 1:(dim(rx)[2])) {
    Y <- Y + (100^((j-1)/(dim(rx)[2]-1))*rx[,j])^2
  }
  return(-Y)
}

rel <- c(f=rel.f,d=list(rel.d),tf=rel.tf,opt=0)


#######################################################################
# Cigar (randomly rotated) (rCG)
#
# Dim:    : n
# Domain  : [-3,7]^n
# Optimum : 0 @ (0,..,0)
# Comment : Now defined for n=10, but may be easily modified.
#           This test function requires rcg.R global matrix to be
#						defined (preferably using gen.R utility function).

rcg.d <- list(
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)))

rcg.tf <- function(u,o,x) {
	X <- x
	return(X)
}

rcg.f <- function(u,o,x) {
	x <- rcg.tf(u,o,x)
  rx <- t(rcg.R %*% t(x))
  Y <- rx[,1]^2
  for (j in 2:(dim(rx)[2])) {
    Y <- Y + 10^4*rx[,j]^2
  }
  return(-Y)
}

rcg <- c(f=rcg.f,d=list(rcg.d),tf=rcg.tf,opt=0)


#######################################################################
# Tablet (randomly rotated) (rTB)
#
# Dim:    : n
# Domain  : [-3,7]
# Optimum : 0 @ (0,..,0)
# Comment : Now defined for n=10, but may be easily modified.
#           This test function requires rtb.R global matrix to be
#						defined (preferably using gen.R utility function).

rtb.d <- list(
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)),
	list("x",c(-3,7)))

rtb.tf <- function(u,o,x) {
	X <- x
	return(X)
}

rtb.f <- function(u,o,x) {
	x <- rtb.tf(u,o,x)
  rx <- t(rtb.R %*% t(x))
  Y <- 10^4*rx[,1]^2
  for (j in 2:(dim(rx)[2])) {
    Y <- Y + rx[,j]^2
  }
  return(-Y)
}

rtb <- c(f=rtb.f,d=list(rtb.d),tf=rtb.tf,opt=0)
